@page "/dashboard"
@rendermode InteractiveServer
@using System.Text.Json
@inject IJSRuntime JSRuntime
@implements IDisposable

<h1>SurveyJS Dashboard</h1>
<div id="surveyDashboardContainer" style="width:100%; height:80vh;"></div>

@code {
    private DotNetObjectReference<Dashboard>? dotNetRef;

    // Minimal demo survey JSON
    private string surveyJson = @"{
      ""pages"": [
        {
          ""name"": ""promotion"",
          ""elements"": [
            {
              ""type"": ""rating"",
              ""name"": ""nps"",
              ""title"": ""How likely are you to recommend our product?"",
              ""rateMin"": 0,
              ""rateMax"": 10
            },
            {
              ""type"": ""radiogroup"",
              ""name"": ""did-recommend"",
              ""title"": ""Have you recommended our product?"",
              ""choices"": [
                { ""value"": 1, ""text"": ""Yes"" },
                { ""value"": 0, ""text"": ""No"" }
              ]
            }
          ]
        }
      ]
    }";

    // Demo survey responses
    private List<Dictionary<string, object>> surveyResponses = new();

    protected override void OnInitialized()
    {
        var rand = new Random();
        for (int i = 0; i < 50; i++)
        {
            surveyResponses.Add(new Dictionary<string, object>
                {
                    ["nps"] = rand.Next(0, 11),
                    ["did-recommend"] = rand.Next(0, 2)
                });
        }
        Console.WriteLine("FormDashboard OnInitialized");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);

            // Serialize the survey responses to JSON
            var surveyResponsesJson = JsonSerializer.Serialize(surveyResponses);

            // Pass survey JSON and response JSON to JS
            await JSRuntime.InvokeVoidAsync(
                "initializeSurveyDashboard",
                surveyJson,
                surveyResponsesJson,
                dotNetRef
            );
        }
    }

    [JSInvokable]
    public Task OnDashboardRendered()
    {
        Console.WriteLine("Dashboard rendered callback received in Blazor");
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}
